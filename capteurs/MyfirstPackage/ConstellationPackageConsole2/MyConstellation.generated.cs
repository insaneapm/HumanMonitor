// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Constellation SDK Code Generator.
//     Generator Version: 1.8.2.17110
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Constellation;
using Constellation.Package;
using System.Threading;
using System.Threading.Tasks;

namespace ConstellationPackageConsole2
{
    /// <summary>
    /// Represents your Constellation
    /// </summary>
	public static class MyConstellation
	{
		/// <summary>
		/// Specifies the sentinels in your Constellation
		/// </summary>
		public enum Sentinels
		{
			/// <summary>
            /// Sentinel 'BATZOO'
            /// </summary>
			[RealName("BATZOO")]
			BATZOO,
		}

		/// <summary>
		/// Specifies the package's instances in your Constellation
		/// </summary>
		public enum PackageInstances
		{
			/// <summary>
            /// Package 'BatteryChecker' on 'BATZOO'
            /// </summary>
			[RealName("BATZOO/BatteryChecker")]
			BATZOO_BatteryChecker,
			/// <summary>
            /// Package 'HWMonitor' on 'BATZOO'
            /// </summary>
			[RealName("BATZOO/HWMonitor")]
			BATZOO_HWMonitor,
			/// <summary>
            /// Package 'MyfirstPackage' on 'BATZOO'
            /// </summary>
			[RealName("BATZOO/MyfirstPackage")]
			BATZOO_MyfirstPackage,
		}
		
		/// <summary>
		/// Specifies the packages in your Constellation
		/// </summary>
		public enum Packages
		{
			/// <summary>
            /// Package 'BatteryChecker'
            /// </summary>
			[RealName("BatteryChecker")]
			BatteryChecker,
			/// <summary>
            /// Package 'HWMonitor'
            /// </summary>
			[RealName("HWMonitor")]
			HWMonitor,
			/// <summary>
            /// Package 'MyfirstPackage'
            /// </summary>
			[RealName("MyfirstPackage")]
			MyfirstPackage,
		}
    
		/// <summary>
        /// Creates the message scope to the specified sentinel.
        /// </summary>
        /// <param name="sentinel">The sentinel.</param>
        /// <returns>MessageScope</returns>
		public static MessageScope CreateScope(this Sentinels sentinel)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Sentinel, sentinel.GetRealName());
		}    
		
		/// <summary>
        /// Creates the message scope to the specified package's instance.
        /// </summary>
        /// <param name="package">The package's instance.</param>
        /// <returns>MessageScope</returns>
		public static MessageScope CreateScope(this PackageInstances package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName());      
		} 
		
		/// <summary>
        /// Creates the message scope to the specified package.
        /// </summary>
        /// <param name="package">The package.</param>
        /// <returns>MessageScope</returns>
		public static MessageScope CreateScope(this Packages package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName());        
		}
	}
	
	/// <summary>
    /// Specifies the real name of an enum value.
    /// </summary>
    /// <seealso cref="System.Attribute" />
	[System.AttributeUsage(System.AttributeTargets.Field)]
	public class RealNameAttribute : System.Attribute
	{
	    /// <summary>
        /// Gets or sets the real name.
        /// </summary>
        /// <value>
        /// The real name.
        /// </value>
		public System.String RealName { get; set; }

		/// <summary>
        /// Initializes a new instance of the <see cref="RealNameAttribute"/> class.
        /// </summary>
        /// <param name="realname">The real name.</param>
		public RealNameAttribute(System.String realname)
		{
			this.RealName = realname;
		}
		
	    /// <summary>
        /// Gets the real name of an enum value.
        /// </summary>
        /// <typeparam name="TEnum">The type of the enum.</typeparam>
        /// <param name="value">The enum value.</param>
        /// <returns>The real name.</returns>
		public static string GetRealName<TEnum>(TEnum value)
		{
			var memInfo = typeof(TEnum).GetMember(value.ToString());
			var attributes = memInfo[0].GetCustomAttributes(typeof(RealNameAttribute), false);
			return (attributes != null && attributes.Length > 0) ? ((RealNameAttribute)attributes[0]).RealName : value.ToString();
		}
	}

	/// <summary>
    /// Provides extension methods to get the real name of a Sentinel, Package or PackageInstance.
    /// </summary>
	public static class RealNameExtension
	{
		/// <summary>
        /// Gets the real name of a Sentinel.
        /// </summary>
        /// <param name="sentinel">The Sentinel.</param>
        /// <returns>The real name.</returns>
		public static string GetRealName(this MyConstellation.Sentinels sentinel)
		{
			return RealNameAttribute.GetRealName<MyConstellation.Sentinels>(sentinel);
		}

		/// <summary>
        /// Gets the real name of a Package.
        /// </summary>
        /// <param name="package">The Package.</param>
        /// <returns>The real name.</returns>
		public static string GetRealName(this MyConstellation.Packages package)
		{
			return RealNameAttribute.GetRealName<MyConstellation.Packages>(package);
		}

		/// <summary>
        /// Gets the real name of a Package's instance.
        /// </summary>
        /// <param name="package">The Package's instance.</param>
        /// <returns>The real name.</returns>
		public static string GetRealName(this MyConstellation.PackageInstances package)
		{
			return RealNameAttribute.GetRealName<MyConstellation.PackageInstances>(package);
		}
	}
}

namespace ConstellationPackageConsole2.BatteryChecker.StateObjects
{
	/// <summary>
	/// Specifies the know StateObjects for the package BatteryChecker
	/// </summary>
	public enum BatteryCheckerStateObjectNames
	{
		/// <summary>
		/// StateObject '072FC7273F933271B97783B73ED696A39A17F4DD'
		/// </summary>
		[RealName("072FC7273F933271B97783B73ED696A39A17F4DD")]
        _072FC7273F933271B97783B73ED696A39A17F4DD,
	}

	/// <summary>
    /// Provides extension methods to get the real name of a BatteryCheckerStateObjectNames.
    /// </summary>
	public static class BatteryCheckerStateObjectNamesExtension
	{
		/// <summary>
        /// Gets the real name of a BatteryChecker's StateObject.
        /// </summary>
        /// <param name="stateObjectName">The BatteryChecker 's StateObject.</param>
        /// <returns>The real name.</returns>
		public static string GetRealName(this BatteryCheckerStateObjectNames stateObjectName)
		{
			return RealNameAttribute.GetRealName<BatteryCheckerStateObjectNames>(stateObjectName);
		}
	}

    /// <summary>
    ///  Specifies that the property is attach to BatteryChecker's StateObject.
    /// </summary>
    /// <seealso cref="Constellation.Package.StateObjectLinkAttribute" />
    public class BatteryCheckerStateObjectLinkAttribute : StateObjectLinkAttribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatteryCheckerStateObjectLinkAttribute"/> class.
        /// </summary>
        public BatteryCheckerStateObjectLinkAttribute() : base()
        {
            this.Package = MyConstellation.Packages.BatteryChecker.GetRealName();
        }

		/// <summary>
        /// Initializes a new instance of the <see cref="BatteryCheckerStateObjectLinkAttribute"/> class.
        /// </summary>
        /// <param name="sentinel">The sentinel.</param>
        public BatteryCheckerStateObjectLinkAttribute(MyConstellation.Sentinels sentinel) : this()
        { 
			this.Sentinel = sentinel.GetRealName();
		}

        /// <summary>
        /// Initializes a new instance of the <see cref="BatteryCheckerStateObjectLinkAttribute"/> class.
        /// </summary>
        /// <param name="name">The StateObject name.</param>
        public BatteryCheckerStateObjectLinkAttribute(BatteryCheckerStateObjectNames name)
            : base(MyConstellation.Packages.BatteryChecker.GetRealName(), name.GetRealName())
        { }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatteryCheckerStateObjectLinkAttribute"/> class.
        /// </summary>
        /// <param name="sentinel">The sentinel.</param>
        /// <param name="name">The StateObject name.</param>
        public BatteryCheckerStateObjectLinkAttribute(MyConstellation.Sentinels sentinel, BatteryCheckerStateObjectNames name)
            : base(sentinel.GetRealName(), MyConstellation.Packages.BatteryChecker.GetRealName(), name.GetRealName())
        { }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatteryCheckerStateObjectLinkAttribute"/> class.
        /// </summary>
        /// <param name="sentinel">The sentinel.</param>
        /// <param name="name">The StateObject name.</param>
        /// <param name="type">The StateObject type.</param>
        public BatteryCheckerStateObjectLinkAttribute(MyConstellation.Sentinels sentinel, BatteryCheckerStateObjectNames name, string type)
            : base(sentinel.GetRealName(), MyConstellation.Packages.BatteryChecker.GetRealName(), name.GetRealName(), type)
        { }
    }

	/// <summary>
	/// Represent the BatteryState 
	/// </summary>
	public class BatteryState 
	{
		/// <summary>
		/// Gets the battery device identifier. 
		/// </summary>
		public System.String DeviceID { get; set; }

		/// <summary>
		/// Gets the battery name. 
		/// </summary>
		public System.String Name { get; set; }

		/// <summary>
		/// Gets the battery state. 
		/// </summary>
		public System.String State { get; set; }

		/// <summary>
		/// Gets the estimated charge remaining. 
		/// </summary>
		public System.Int32 EstimatedChargeRemaining { get; set; }

		/// <summary>
		/// Gets the estimated run time. 
		/// </summary>
		public System.Int32 EstimatedRunTime { get; set; }

		/// <summary>
		/// Gets the battery status code. 
		/// </summary>
		public System.Int32 StatusCode { get; set; }

		/// <summary>
		/// Gets the battery status label. 
		/// </summary>
		public System.String StatusLabel { get; set; }

	}

    /// <summary>
    /// Provides extension methods for BatteryChecker's StateObjects
    /// </summary>
	public static class BatteryCheckerExtensions
	{
		/// <summary>
		/// Get StateObject value as BatteryState
		/// </summary>
		public static BatteryState AsBatteryCheckerBatteryState(this StateObject stateObject)
		{
			return stateObject.GetValue<BatteryState>();
		}

		/// <summary>
		/// Get StateObject value as BatteryState
		/// </summary>
		public static BatteryState AsBatteryCheckerBatteryState(this StateObjectNotifier stateObjectNotifier)
		{
			return stateObjectNotifier.Value.GetValue<BatteryState>();
		}

	}
}


namespace ConstellationPackageConsole2.HWMonitor.StateObjects
{
	/// <summary>
	/// Specifies the know StateObjects for the package HWMonitor
	/// </summary>
	public enum HWMonitorStateObjectNames
	{
		/// <summary>
		/// StateObject '/hdd/0'
		/// </summary>
		[RealName("/hdd/0")]
        _hdd_0,
		/// <summary>
		/// StateObject '/hdd/0/data/1'
		/// </summary>
		[RealName("/hdd/0/data/1")]
        _hdd_0_data_1,
		/// <summary>
		/// StateObject '/hdd/0/data/2'
		/// </summary>
		[RealName("/hdd/0/data/2")]
        _hdd_0_data_2,
		/// <summary>
		/// StateObject '/hdd/0/level/0'
		/// </summary>
		[RealName("/hdd/0/level/0")]
        _hdd_0_level_0,
		/// <summary>
		/// StateObject '/hdd/0/load/0'
		/// </summary>
		[RealName("/hdd/0/load/0")]
        _hdd_0_load_0,
		/// <summary>
		/// StateObject '/hdd/0/temperature/0'
		/// </summary>
		[RealName("/hdd/0/temperature/0")]
        _hdd_0_temperature_0,
		/// <summary>
		/// StateObject '/intelcpu/0/clock/0'
		/// </summary>
		[RealName("/intelcpu/0/clock/0")]
        _intelcpu_0_clock_0,
		/// <summary>
		/// StateObject '/intelcpu/0/clock/1'
		/// </summary>
		[RealName("/intelcpu/0/clock/1")]
        _intelcpu_0_clock_1,
		/// <summary>
		/// StateObject '/intelcpu/0/clock/2'
		/// </summary>
		[RealName("/intelcpu/0/clock/2")]
        _intelcpu_0_clock_2,
		/// <summary>
		/// StateObject '/intelcpu/0/load/0'
		/// </summary>
		[RealName("/intelcpu/0/load/0")]
        _intelcpu_0_load_0,
		/// <summary>
		/// StateObject '/intelcpu/0/load/1'
		/// </summary>
		[RealName("/intelcpu/0/load/1")]
        _intelcpu_0_load_1,
		/// <summary>
		/// StateObject '/intelcpu/0/load/2'
		/// </summary>
		[RealName("/intelcpu/0/load/2")]
        _intelcpu_0_load_2,
		/// <summary>
		/// StateObject '/intelcpu/0/power/0'
		/// </summary>
		[RealName("/intelcpu/0/power/0")]
        _intelcpu_0_power_0,
		/// <summary>
		/// StateObject '/intelcpu/0/power/1'
		/// </summary>
		[RealName("/intelcpu/0/power/1")]
        _intelcpu_0_power_1,
		/// <summary>
		/// StateObject '/intelcpu/0/power/2'
		/// </summary>
		[RealName("/intelcpu/0/power/2")]
        _intelcpu_0_power_2,
		/// <summary>
		/// StateObject '/intelcpu/0/power/3'
		/// </summary>
		[RealName("/intelcpu/0/power/3")]
        _intelcpu_0_power_3,
		/// <summary>
		/// StateObject '/intelcpu/0/temperature/0'
		/// </summary>
		[RealName("/intelcpu/0/temperature/0")]
        _intelcpu_0_temperature_0,
		/// <summary>
		/// StateObject '/intelcpu/0/temperature/1'
		/// </summary>
		[RealName("/intelcpu/0/temperature/1")]
        _intelcpu_0_temperature_1,
		/// <summary>
		/// StateObject '/intelcpu/0/temperature/2'
		/// </summary>
		[RealName("/intelcpu/0/temperature/2")]
        _intelcpu_0_temperature_2,
		/// <summary>
		/// StateObject '/nvidiagpu/0/clock/0'
		/// </summary>
		[RealName("/nvidiagpu/0/clock/0")]
        _nvidiagpu_0_clock_0,
		/// <summary>
		/// StateObject '/nvidiagpu/0/clock/1'
		/// </summary>
		[RealName("/nvidiagpu/0/clock/1")]
        _nvidiagpu_0_clock_1,
		/// <summary>
		/// StateObject '/nvidiagpu/0/clock/2'
		/// </summary>
		[RealName("/nvidiagpu/0/clock/2")]
        _nvidiagpu_0_clock_2,
		/// <summary>
		/// StateObject '/nvidiagpu/0/load/3'
		/// </summary>
		[RealName("/nvidiagpu/0/load/3")]
        _nvidiagpu_0_load_3,
		/// <summary>
		/// StateObject '/nvidiagpu/0/smalldata/1'
		/// </summary>
		[RealName("/nvidiagpu/0/smalldata/1")]
        _nvidiagpu_0_smalldata_1,
		/// <summary>
		/// StateObject '/nvidiagpu/0/smalldata/2'
		/// </summary>
		[RealName("/nvidiagpu/0/smalldata/2")]
        _nvidiagpu_0_smalldata_2,
		/// <summary>
		/// StateObject '/nvidiagpu/0/smalldata/3'
		/// </summary>
		[RealName("/nvidiagpu/0/smalldata/3")]
        _nvidiagpu_0_smalldata_3,
		/// <summary>
		/// StateObject '/ram/data/0'
		/// </summary>
		[RealName("/ram/data/0")]
        _ram_data_0,
		/// <summary>
		/// StateObject '/ram/data/1'
		/// </summary>
		[RealName("/ram/data/1")]
        _ram_data_1,
		/// <summary>
		/// StateObject '/ram/load/0'
		/// </summary>
		[RealName("/ram/load/0")]
        _ram_load_0,
		/// <summary>
		/// StateObject 'Hardware'
		/// </summary>
		[RealName("Hardware")]
        Hardware,
	}

	/// <summary>
    /// Provides extension methods to get the real name of a HWMonitorStateObjectNames.
    /// </summary>
	public static class HWMonitorStateObjectNamesExtension
	{
		/// <summary>
        /// Gets the real name of a HWMonitor's StateObject.
        /// </summary>
        /// <param name="stateObjectName">The HWMonitor 's StateObject.</param>
        /// <returns>The real name.</returns>
		public static string GetRealName(this HWMonitorStateObjectNames stateObjectName)
		{
			return RealNameAttribute.GetRealName<HWMonitorStateObjectNames>(stateObjectName);
		}
	}

    /// <summary>
    ///  Specifies that the property is attach to HWMonitor's StateObject.
    /// </summary>
    /// <seealso cref="Constellation.Package.StateObjectLinkAttribute" />
    public class HWMonitorStateObjectLinkAttribute : StateObjectLinkAttribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HWMonitorStateObjectLinkAttribute"/> class.
        /// </summary>
        public HWMonitorStateObjectLinkAttribute() : base()
        {
            this.Package = MyConstellation.Packages.HWMonitor.GetRealName();
        }

		/// <summary>
        /// Initializes a new instance of the <see cref="HWMonitorStateObjectLinkAttribute"/> class.
        /// </summary>
        /// <param name="sentinel">The sentinel.</param>
        public HWMonitorStateObjectLinkAttribute(MyConstellation.Sentinels sentinel) : this()
        { 
			this.Sentinel = sentinel.GetRealName();
		}

        /// <summary>
        /// Initializes a new instance of the <see cref="HWMonitorStateObjectLinkAttribute"/> class.
        /// </summary>
        /// <param name="name">The StateObject name.</param>
        public HWMonitorStateObjectLinkAttribute(HWMonitorStateObjectNames name)
            : base(MyConstellation.Packages.HWMonitor.GetRealName(), name.GetRealName())
        { }

        /// <summary>
        /// Initializes a new instance of the <see cref="HWMonitorStateObjectLinkAttribute"/> class.
        /// </summary>
        /// <param name="sentinel">The sentinel.</param>
        /// <param name="name">The StateObject name.</param>
        public HWMonitorStateObjectLinkAttribute(MyConstellation.Sentinels sentinel, HWMonitorStateObjectNames name)
            : base(sentinel.GetRealName(), MyConstellation.Packages.HWMonitor.GetRealName(), name.GetRealName())
        { }

        /// <summary>
        /// Initializes a new instance of the <see cref="HWMonitorStateObjectLinkAttribute"/> class.
        /// </summary>
        /// <param name="sentinel">The sentinel.</param>
        /// <param name="name">The StateObject name.</param>
        /// <param name="type">The StateObject type.</param>
        public HWMonitorStateObjectLinkAttribute(MyConstellation.Sentinels sentinel, HWMonitorStateObjectNames name, string type)
            : base(sentinel.GetRealName(), MyConstellation.Packages.HWMonitor.GetRealName(), name.GetRealName(), type)
        { }
    }

	/// <summary>
	/// Represent a Hardware device 
	/// </summary>
	public class HardwareDevice 
	{
		/// <summary>
		/// Gets or sets the name. 
		/// </summary>
		public System.String Name { get; set; }

		/// <summary>
		/// Gets or sets the identifier. 
		/// </summary>
		public System.String Identifier { get; set; }

		/// <summary>
		/// Gets or sets the hardware type. 
		/// </summary>
		public HardwareType Type { get; set; }

	}

	/// <summary>
	/// Represent a HDD 
	/// </summary>
	public class DiskDrive 
	{
		/// <summary>
		/// Gets or sets the name. 
		/// </summary>
		public System.String Name { get; set; }

		/// <summary>
		/// Gets or sets the hardware. 
		/// </summary>
		public System.String Hardware { get; set; }

		/// <summary>
		/// Gets or sets the serial number. 
		/// </summary>
		public System.String SerialNumber { get; set; }

		/// <summary>
		/// Gets or sets the model. 
		/// </summary>
		public System.String Model { get; set; }

		/// <summary>
		/// Gets or sets the status. 
		/// </summary>
		public System.String Status { get; set; }

		/// <summary>
		/// Gets or sets the type of the media. 
		/// </summary>
		public System.String MediaType { get; set; }

		/// <summary>
		/// Gets or sets the manufacturer. 
		/// </summary>
		public System.String Manufacturer { get; set; }

		/// <summary>
		/// Gets or sets the caption. 
		/// </summary>
		public System.String Caption { get; set; }

	}

	/// <summary>
	/// Represent a Hardware sensor value 
	/// </summary>
	public class SensorValue 
	{
		/// <summary>
		/// Gets or sets the sensor name. 
		/// </summary>
		public System.String Name { get; set; }

		/// <summary>
		/// Gets or sets the value. 
		/// </summary>
		public System.Nullable<System.Single> Value { get; set; }

		/// <summary>
		/// Gets or sets the sensor type. 
		/// </summary>
		public SensorType Type { get; set; }

		/// <summary>
		/// Gets the unit of the value. 
		/// </summary>
		public System.String Unit { get; set; }

	}

	/// <summary>
	/// Enum 'HardwareType'
	/// </summary>
	public enum HardwareType
	{
		/// <summary>
		/// Mainboard.
		/// </summary>
		Mainboard,
		/// <summary>
		/// SuperIO.
		/// </summary>
		SuperIO,
		/// <summary>
		/// CPU.
		/// </summary>
		CPU,
		/// <summary>
		/// RAM.
		/// </summary>
		RAM,
		/// <summary>
		/// GpuNvidia.
		/// </summary>
		GpuNvidia,
		/// <summary>
		/// GpuAti.
		/// </summary>
		GpuAti,
		/// <summary>
		/// TBalancer.
		/// </summary>
		TBalancer,
		/// <summary>
		/// Heatmaster.
		/// </summary>
		Heatmaster,
		/// <summary>
		/// HDD.
		/// </summary>
		HDD,
	}

	/// <summary>
	/// Enum 'SensorType'
	/// </summary>
	public enum SensorType
	{
		/// <summary>
		/// Voltage.
		/// </summary>
		Voltage,
		/// <summary>
		/// Clock.
		/// </summary>
		Clock,
		/// <summary>
		/// Temperature.
		/// </summary>
		Temperature,
		/// <summary>
		/// Load.
		/// </summary>
		Load,
		/// <summary>
		/// Fan.
		/// </summary>
		Fan,
		/// <summary>
		/// Flow.
		/// </summary>
		Flow,
		/// <summary>
		/// Control.
		/// </summary>
		Control,
		/// <summary>
		/// Level.
		/// </summary>
		Level,
		/// <summary>
		/// Factor.
		/// </summary>
		Factor,
		/// <summary>
		/// Power.
		/// </summary>
		Power,
		/// <summary>
		/// Data.
		/// </summary>
		Data,
		/// <summary>
		/// SmallData.
		/// </summary>
		SmallData,
	}

    /// <summary>
    /// Provides extension methods for HWMonitor's StateObjects
    /// </summary>
	public static class HWMonitorExtensions
	{
		/// <summary>
		/// Get StateObject value as HardwareDevice
		/// </summary>
		public static HardwareDevice AsHWMonitorHardwareDevice(this StateObject stateObject)
		{
			return stateObject.GetValue<HardwareDevice>();
		}

		/// <summary>
		/// Get StateObject value as HardwareDevice
		/// </summary>
		public static HardwareDevice AsHWMonitorHardwareDevice(this StateObjectNotifier stateObjectNotifier)
		{
			return stateObjectNotifier.Value.GetValue<HardwareDevice>();
		}

		/// <summary>
		/// Get StateObject value as DiskDrive
		/// </summary>
		public static DiskDrive AsHWMonitorDiskDrive(this StateObject stateObject)
		{
			return stateObject.GetValue<DiskDrive>();
		}

		/// <summary>
		/// Get StateObject value as DiskDrive
		/// </summary>
		public static DiskDrive AsHWMonitorDiskDrive(this StateObjectNotifier stateObjectNotifier)
		{
			return stateObjectNotifier.Value.GetValue<DiskDrive>();
		}

		/// <summary>
		/// Get StateObject value as SensorValue
		/// </summary>
		public static SensorValue AsHWMonitorSensorValue(this StateObject stateObject)
		{
			return stateObject.GetValue<SensorValue>();
		}

		/// <summary>
		/// Get StateObject value as SensorValue
		/// </summary>
		public static SensorValue AsHWMonitorSensorValue(this StateObjectNotifier stateObjectNotifier)
		{
			return stateObjectNotifier.Value.GetValue<SensorValue>();
		}

		/// <summary>
		/// Get StateObject value as System.Collections.Generic.List Of HardwareDevice
		/// </summary>
		public static System.Collections.Generic.List<HardwareDevice> AsHWMonitorListOfHardwareDevice(this StateObject stateObject)
		{
			return stateObject.GetValue<System.Collections.Generic.List<HardwareDevice>>();
		}

	}
}


namespace ConstellationPackageConsole2.MyfirstPackage.StateObjects
{
	/// <summary>
	/// Specifies the know StateObjects for the package MyfirstPackage
	/// </summary>
	public enum MyfirstPackageStateObjectNames
	{
		/// <summary>
		/// StateObject 'Connecté '
		/// </summary>
		[RealName("Connecté ")]
        Connecté_,
		/// <summary>
		/// StateObject 'ShortLife'
		/// </summary>
		[RealName("ShortLife")]
        ShortLife,
		/// <summary>
		/// StateObject 'Température'
		/// </summary>
		[RealName("Température")]
        Température,
	}

	/// <summary>
    /// Provides extension methods to get the real name of a MyfirstPackageStateObjectNames.
    /// </summary>
	public static class MyfirstPackageStateObjectNamesExtension
	{
		/// <summary>
        /// Gets the real name of a MyfirstPackage's StateObject.
        /// </summary>
        /// <param name="stateObjectName">The MyfirstPackage 's StateObject.</param>
        /// <returns>The real name.</returns>
		public static string GetRealName(this MyfirstPackageStateObjectNames stateObjectName)
		{
			return RealNameAttribute.GetRealName<MyfirstPackageStateObjectNames>(stateObjectName);
		}
	}

    /// <summary>
    ///  Specifies that the property is attach to MyfirstPackage's StateObject.
    /// </summary>
    /// <seealso cref="Constellation.Package.StateObjectLinkAttribute" />
    public class MyfirstPackageStateObjectLinkAttribute : StateObjectLinkAttribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MyfirstPackageStateObjectLinkAttribute"/> class.
        /// </summary>
        public MyfirstPackageStateObjectLinkAttribute() : base()
        {
            this.Package = MyConstellation.Packages.MyfirstPackage.GetRealName();
        }

		/// <summary>
        /// Initializes a new instance of the <see cref="MyfirstPackageStateObjectLinkAttribute"/> class.
        /// </summary>
        /// <param name="sentinel">The sentinel.</param>
        public MyfirstPackageStateObjectLinkAttribute(MyConstellation.Sentinels sentinel) : this()
        { 
			this.Sentinel = sentinel.GetRealName();
		}

        /// <summary>
        /// Initializes a new instance of the <see cref="MyfirstPackageStateObjectLinkAttribute"/> class.
        /// </summary>
        /// <param name="name">The StateObject name.</param>
        public MyfirstPackageStateObjectLinkAttribute(MyfirstPackageStateObjectNames name)
            : base(MyConstellation.Packages.MyfirstPackage.GetRealName(), name.GetRealName())
        { }

        /// <summary>
        /// Initializes a new instance of the <see cref="MyfirstPackageStateObjectLinkAttribute"/> class.
        /// </summary>
        /// <param name="sentinel">The sentinel.</param>
        /// <param name="name">The StateObject name.</param>
        public MyfirstPackageStateObjectLinkAttribute(MyConstellation.Sentinels sentinel, MyfirstPackageStateObjectNames name)
            : base(sentinel.GetRealName(), MyConstellation.Packages.MyfirstPackage.GetRealName(), name.GetRealName())
        { }

        /// <summary>
        /// Initializes a new instance of the <see cref="MyfirstPackageStateObjectLinkAttribute"/> class.
        /// </summary>
        /// <param name="sentinel">The sentinel.</param>
        /// <param name="name">The StateObject name.</param>
        /// <param name="type">The StateObject type.</param>
        public MyfirstPackageStateObjectLinkAttribute(MyConstellation.Sentinels sentinel, MyfirstPackageStateObjectNames name, string type)
            : base(sentinel.GetRealName(), MyConstellation.Packages.MyfirstPackage.GetRealName(), name.GetRealName(), type)
        { }
    }

	/// <summary>
	/// Type 'TemperatureHumidity'
	/// </summary>
	public class TemperatureHumidity 
	{
		/// <summary>
		/// The Temperature.
		/// </summary>
		public System.Double Temperature { get; set; }

		/// <summary>
		/// The Humidity.
		/// </summary>
		public System.Int32 Humidity { get; set; }

	}

    /// <summary>
    /// Provides extension methods for MyfirstPackage's StateObjects
    /// </summary>
	public static class MyfirstPackageExtensions
	{
		/// <summary>
		/// Get StateObject value as TemperatureHumidity
		/// </summary>
		public static TemperatureHumidity AsMyfirstPackageTemperatureHumidity(this StateObject stateObject)
		{
			return stateObject.GetValue<TemperatureHumidity>();
		}

		/// <summary>
		/// Get StateObject value as TemperatureHumidity
		/// </summary>
		public static TemperatureHumidity AsMyfirstPackageTemperatureHumidity(this StateObjectNotifier stateObjectNotifier)
		{
			return stateObjectNotifier.Value.GetValue<TemperatureHumidity>();
		}

	}
}

namespace ConstellationPackageConsole2.MyfirstPackage.MessageCallbacks
{
	/// <summary>
	/// Provides extension methods for the MessageScope to MyfirstPackage
	/// </summary>
	public static class MyfirstPackageExtensions
	{
		/// <summary>
		/// Create a MyfirstPackageScope
		/// </summary>
		/// <param name="scope">The Constellation MessageScope</param>
		public static MyfirstPackageScope ToMyfirstPackageScope(this MessageScope scope)
		{
			return new MyfirstPackageScope(scope);
		}

		/// <summary>
		/// Create a MyfirstPackageScope to all packages of the specified sentinel
		/// </summary>
		/// <param name="sentinel">The sentinel</param>
		public static MyfirstPackageScope CreateMyfirstPackageScope(this ConstellationPackageConsole2.MyConstellation.Sentinels sentinel)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Sentinel, sentinel.GetRealName()).ToMyfirstPackageScope();        
		}
		
		/// <summary>
		/// Create a MyfirstPackageScope to a specific package
		/// </summary>
		/// <param name="package">The package</param>
		public static MyfirstPackageScope CreateMyfirstPackageScope(this ConstellationPackageConsole2.MyConstellation.PackageInstances package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName()).ToMyfirstPackageScope();        
		}
		
		/// <summary>
		/// Create a MyfirstPackageScope to a specific package
		/// </summary>
		/// <param name="package">The package</param>
		public static MyfirstPackageScope CreateMyfirstPackageScope(this ConstellationPackageConsole2.MyConstellation.Packages package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName()).ToMyfirstPackageScope();  
		}
	}

	/// <summary>
    /// Represent a message scope to MyfirstPackage
    /// </summary>
	public class MyfirstPackageScope
	{
        /// <summary>
        /// The current scope
        /// </summary>
		private MessageScope currentScope = null;

		/// <summary>
        /// Initializes a new instance of the <see cref="MyfirstPackageScope"/> class.
        /// </summary>
        /// <param name="scope">The scope.</param>
		public MyfirstPackageScope(MessageScope scope)
		{
			this.currentScope = scope;
		}

		/// <summary>
		/// Send message 'BeepBeep' to the current scope
		/// </summary>
		/// <param name="frequency">frequece en Hz</param>
		/// <param name="duree">durée en ms</param>
		public void BeepBeep(System.Int32 frequency, System.Int32 duree)
		{
			this.currentScope.GetProxy().BeepBeep(frequency, duree);
		}

		/// <summary>
		/// Send message 'Addition' to the current scope
		/// </summary>
		/// <param name="a">The 'a' parameter</param>
		/// <param name="b">The 'b' parameter</param>
		/// <returns>Task of System.Int32</returns>
		/// <param name="cancellationToken">The CancellationToken that this task will observe.</param>		
		/// <param name="context">The MessageContext of the received message.</param>
		public Task<System.Int32> Addition(System.Int32 a, System.Int32 b, CancellationToken cancellationToken, out MessageContext context)
		{
			Task<dynamic> result = this.currentScope.GetProxy().Addition<System.Int32>(a, b, cancellationToken, out context);
            return result.ContinueWith<System.Int32>(task => (System.Int32)task.Result);
		}

		/// <summary>
		/// Send message 'Addition' to the current scope
		/// </summary>
		/// <param name="a">The 'a' parameter</param>
		/// <param name="b">The 'b' parameter</param>
		/// <returns>Task of System.Int32</returns>
		/// <param name="context">The MessageContext of the received message.</param>
		public Task<System.Int32> Addition(System.Int32 a, System.Int32 b, out MessageContext context)
		{
			Task<dynamic> result = this.currentScope.GetProxy().Addition<System.Int32>(a, b, out context);
            return result.ContinueWith<System.Int32>(task => (System.Int32)task.Result);
		}

		/// <summary>
		/// Send message 'Addition' to the current scope
		/// </summary>
		/// <param name="a">The 'a' parameter</param>
		/// <param name="b">The 'b' parameter</param>
		/// <returns>Task of System.Int32</returns>
		/// <param name="cancellationToken">The CancellationToken that this task will observe.</param>
		public Task<System.Int32> Addition(System.Int32 a, System.Int32 b, CancellationToken cancellationToken)
		{
			Task<dynamic> result = this.currentScope.GetProxy().Addition<System.Int32>(a, b, cancellationToken);
            return result.ContinueWith<System.Int32>(task => (System.Int32)task.Result);
		}

		/// <summary>
		/// Send message 'Addition' to the current scope
		/// </summary>
		/// <param name="a">The 'a' parameter</param>
		/// <param name="b">The 'b' parameter</param>
		/// <returns>Task of System.Int32</returns>
		public Task<System.Int32> Addition(System.Int32 a, System.Int32 b)
		{
			Task<dynamic> result = this.currentScope.GetProxy().Addition<System.Int32>(a, b);
            return result.ContinueWith<System.Int32>(task => (System.Int32)task.Result);
		}

	}
}
